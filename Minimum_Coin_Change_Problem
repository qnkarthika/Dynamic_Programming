2.Given an array coins[] of size N and a target value V, where coins[i] represents the coins of different denominations.
You have an infinite supply of each of coins. The task is to find minimum number of coins required to make the given value V. If itâ€™s not possible to make a change, print -1.

Examples:  

Input: coins[] = {25, 10, 5}, V = 30
Output: Minimum 2 coins required We can use one coin of 25 cents and one of 5 cents 

Input: coins[] = {9, 6, 5, 1}, V = 11
Output: Minimum 2 coins required We can use one coin of 6 cents and 1 coin of 5 cents

Solution:

import java.util.*;
class Main {
    public static  int coinChange(int amount,int a[],int n){
        Arrays.sort(a);
        int dp[][]=new int[n][amount+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=amount;j++){
                if(j==0) dp[i][j]=0;
                else if(i==0 ){
                     dp[i][j]=j;
                }
                else if(j<a[i]) dp[i][j]=dp[i-1][j];
                else{
                  dp[i][j] =Math.min(dp[i-1][j] ,1+ dp[i][j-a[i]]);                }
            }
        }
        return dp[n-1][amount];
    }
    public static void main(String[] args) {
       Scanner s=new Scanner(System.in);
       int amount =s.nextInt();
       int n=s.nextInt();
       int a[]=new int[n];
       for(int i=0;i<n;i++){
           a[i]=s.nextInt();
       }
      int count= coinChange(amount,a,n);
      System.out.print(count);
    }
}
