3.Given a set of non-negative integers and a value sum, the task is to check if there is a subset of the given set whose sum is equal to the given sum. 

Examples: 

Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 9
Output: True
Explanation: There is a subset (4, 5) with sum 9.

Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 30
Output: False
Explanation: There is no subset that add up to 30.

Solution:

import java.util.*;
class Main {
    public static  boolean subsetSum(int amount,int a[],int n){
        Arrays.sort(a);
        int dp[][]=new int[n][amount+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<=amount;j++){
                if(j==0) 
                      dp[i][j]=1;
                else if(i==0 )
                     dp[i][j]=a[i]==j?1:0;
                else if(j<a[i]) 
                     dp[i][j]=dp[i-1][j];
                else
                     dp[i][j] =dp[i-1][j]==1?dp[i-1][j]:dp[i-1][j-a[i]];
            }
        }
        return dp[n-1][amount]==1?true:false;
    }
    public static void main(String[] args) {
       Scanner s=new Scanner(System.in);
       int amount =s.nextInt();
       int n=s.nextInt();
       int a[]=new int[n];
       for(int i=0;i<n;i++){
           a[i]=s.nextInt();
       }
      boolean result= subsetSum(amount,a,n);
      System.out.print(result);
    }
}
